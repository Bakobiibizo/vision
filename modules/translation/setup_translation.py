import os
import base64
import subprocess

folder_path = f"modules/translation"

file_data = [
    (
        "data_models.py",
        "",
    ),
    ("__init__.py", ""),
    (
        "translation_module.py",
        "aW1wb3J0IG9zCmltcG9ydCBpbwppbXBvcnQgYmFzZTY0CmZyb20gdHlwaW5nIGltcG9ydCBVbmlvbiwgT3B0aW9uYWwKZnJvbSBmYXN0YXBpIGltcG9ydCBIVFRQRXhjZXB0aW9uCmZyb20gZG90ZW52IGltcG9ydCBsb2FkX2RvdGVudgpmcm9tIGxvZ3VydSBpbXBvcnQgbG9nZ2VyCgpmcm9tIC5kYXRhX21vZGVscyBpbXBvcnQgVHJhbnNsYXRpb25SZXF1ZXN0LCBNaW5lckNvbmZpZywgTW9kdWxlQ29uZmlnLCBCYXNlTWluZXIsIFRyYW5zbGF0aW9uQ29uZmlnCmZyb20gLnRyYW5zbGF0aW9uIGltcG9ydCBUcmFuc2xhdGlvbgoKbG9hZF9kb3RlbnYoKQoKCm1vZHVsZV9zZXR0aW5ncyA9IE1vZHVsZUNvbmZpZygKICAgIG1vZHVsZV9wYXRoPW9zLmdldGVudigiTU9EVUxFX1BBVEgiKSwKICAgIG1vZHVsZV9uYW1lPW9zLmdldGVudigiTU9EVUxFX05BTUUiKSwKICAgIG1vZHVsZV9lbmRwb2ludD1vcy5nZXRlbnYoIk1PRFVMRV9FTkRQT0lOVCIpLAogICAgbW9kdWxlX3VybD0iaHR0cHM6Ly9odHRwOi8vbG9jYWxob3N0OjQyNjcvIgopCgptaW5lcl9zZXR0aW5ncyA9IE1pbmVyQ29uZmlnKAogICAgbWluZXJfbmFtZT1vcy5nZXRlbnYoIk1JTkVSX05BTUUiKSwKICAgIG1pbmVyX2tleXBhdGg9b3MuZ2V0ZW52KCJLRVlQQVRIX05BTUUiKSwKICAgIG1pbmVyX2hvc3Q9b3MuZ2V0ZW52KCJNSU5FUl9IT1NUIiksCiAgICBleHRlcm5hbF9hZGRyZXNzPW9zLmdldGVudigiRVhURVJOQUxfQUREUkVTUyIpLAogICAgbWluZXJfcG9ydD1vcy5nZXRlbnYoIk1JTkVSX1BPUlQiKSwKICAgIHN0YWtlPW9zLmdldGVudigiU1RBS0UiKSwKICAgIG5ldHVpZD1vcy5nZXRlbnYoIk5FVFVJRCIpLAogICAgZnVuZGluZ19rZXk9b3MuZ2V0ZW52KCJGVU5ESU5HX0tFWSIpLAogICAgZnVuZGluZ19tb2RpZmllcj1vcy5nZXRlbnYoIk1PRElGSUVSIiksCiAgICBtb2R1bGVfbmFtZT1vcy5nZXRlbnYoIk1PRFVMRV9OQU1FIikKKQp0cmFuc2xhdG9yID0gVHJhbnNsYXRpb24oVHJhbnNsYXRpb25Db25maWcoKSkKCgpjbGFzcyBUcmFuc2xhdGlvbk1pbmVyKEJhc2VNaW5lcik6CiAgICAKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIG1pbmVyX2NvbmZpZzogTWluZXJDb25maWcsCiAgICAgICAgbW9kdWxlX2NvbmZpZzogTW9kdWxlQ29uZmlnCiAgICApOgogICAgICAgICIiIgogICAgICAgIEluaXRpYWxpemVzIHRoZSBUcmFuc2xhdGlvbk1pbmVyIGNsYXNzIHdpdGggb3B0aW9uYWwgcm91dGUsIGlucGF0aCwgYW5kIG91dHBhdGggcGFyYW1ldGVycy4KICAgICAgICAKICAgICAgICBQYXJhbWV0ZXJzOgogICAgICAgICAgICBtaW5lcl9jb25maWcgKE1pbmVyQ29uZmlnKTogVGhlIHJvdXRlIGZvciB0aGUgdHJhbnNsYXRpb24uCiAgICAgICAgICAgIG1vZHVsZV9jb25maWcgKE1vZHVsZUNvbmZpZyk6IFRoZSBpbnB1dCBwYXRoIGZvciB0cmFuc2xhdGlvbi4KICAgICAgICAiIiIKICAgICAgICBzdXBlcigpLl9faW5pdF9fKG1pbmVyX2NvbmZpZywgbW9kdWxlX3NldHRpbmdzKSAgICAgICAgCiAgICAgICAgb3MubWFrZWRpcnMobW9kdWxlX2NvbmZpZy5tb2R1bGVfcGF0aCwgZXhpc3Rfb2s9VHJ1ZSkKICAgICAgICBvcy5tYWtlZGlycyhmInttb2R1bGVfY29uZmlnLm1vZHVsZV9wYXRofS9pbiIsIGV4aXN0X29rPVRydWUpCiAgICAgICAgb3MubWFrZWRpcnMoZiJ7bW9kdWxlX2NvbmZpZy5tb2R1bGVfcGF0aH0vb3V0IiwgZXhpc3Rfb2s9VHJ1ZSkKICAgIAogICAgZGVmIHByb2Nlc3Moc2VsZiwgbWluZXJfcmVxdWVzdDogVHJhbnNsYXRpb25SZXF1ZXN0KSAtPiBVbmlvbltzdHIsIGJ5dGVzXToKICAgICAgICAiIiIKICAgICAgICBQcm9jZXNzZXMgdGhlIGdpdmVuIGBUcmFuc2xhdGlvblJlcXVlc3RgIG9iamVjdCBhbmQgcmV0dXJucyB0aGUgdHJhbnNsYXRpb24gcmVzdWx0LgoKICAgICAgICBQYXJhbWV0ZXJzOgogICAgICAgICAgICBtaW5lcl9yZXF1ZXN0IChUcmFuc2xhdGlvblJlcXVlc3QpOiBUaGUgcmVxdWVzdCBvYmplY3QgY29udGFpbmluZyB0aGUgaW5wdXQgZGF0YSwgdGFzayBzdHJpbmcsIHNvdXJjZSBsYW5ndWFnZSwgYW5kIHRhcmdldCBsYW5ndWFnZS4KCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgVW5pb25bc3RyLCBieXRlc106IFRoZSB0cmFuc2xhdGlvbiByZXN1bHQuCgogICAgICAgIFJhaXNlczoKICAgICAgICAgICAgSFRUUEV4Y2VwdGlvbjogSWYgYW4gZXJyb3Igb2NjdXJzIGR1cmluZyB0aGUgdHJhbnNsYXRpb24gcHJvY2Vzcy4KCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRvci5wcm9jZXNzKG1pbmVyX3JlcXVlc3QpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJFcnJvciBwcm9jZXNzaW5nIHRyYW5zbGF0aW9uOiB7ZX0iKQogICAgICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWYiRXJyb3IgcHJvY2Vzc2luZyB0cmFuc2xhdGlvbjoge2V9IikgZnJvbSBlCiAgICAKICAgICAgICAKbWluZXIgPSBUcmFuc2xhdGlvbk1pbmVyKG1vZHVsZV9jb25maWc9bW9kdWxlX3NldHRpbmdzLCBtaW5lcl9jb25maWc9bWluZXJfc2V0dGluZ3MpCgptaW5lci5hZGRfcm91dGUobW9kdWxlX3NldHRpbmdzLm1vZHVsZV9uYW1lKQoKbWluZXIucnVuX3NlcnZlcihtaW5lcl9zZXR0aW5ncy5taW5lcl9ob3N0LCBtaW5lcl9zZXR0aW5ncy5taW5lcl9wb3J0KQo=",
    ),
    (
        "translation.py",
        "",
    ),
    (
        "install_translation.sh",
        "IyEvYmluL2Jhc2gKCnNldCAtZQoKc291cmNlIC4vLnZlbnYvYmluL2FjdGl2YXRlCgpweXRob24gLW0gcGlwIGluc3RhbGwgLS11cGdyYWRlIHBpcAoKcGlwIGluc3RhbGwgc2V0dXB0b29scyB3aGVlbCBnbnVyZWFkbGluZQpwaXAgaW5zdGFsbCBzbmRmaWxlIGdnbWwtcHl0aG9uIHN1YnN0cmF0ZS1pbnRlcmZhY2UgYml0dGVuc29yIGxvZ3VydQpwaXAgaW5zdGFsbCBmYXN0YXBpIHV2aWNvcm4gbG9ndXJ1IHJlcXVlc3RzIHN1YnN0cmF0ZS1pbnRlcmZhY2Ugc2VudGVuY2VwaWVjZSBwcm90b2J1ZiBzY2lweQoKaWYgY29tbWFuZCAtdiBhcHQtZ2V0ID4vZGV2L251bGw7IHRoZW4KICAgIHN1ZG8gYXB0LWdldCB1cGRhdGUgJiYgc3VkbyBhcHQtZ2V0IHVwZ3JhZGUgLXkKICAgIHN1ZG8gYXB0LWdldCBpbnN0YWxsIHB5dGhvbjMgcHl0aG9uMy1kZXYgcHl0aG9uMy12ZW52IHB5dGhvbjMtcGlwIHB5dGhvbi1pcy1weXRob24zIGxpYnNuZGZpbGUxLWRldiBsaWJnbXAxMC1kZXYgLXkKZWxpZiBjb21tYW5kIC12IHBhY21hbiA+L2Rldi9udWxsOyB0aGVuCiAgICBzdWRvIHBhY21hbiAtU3l1IC0tbm9jb25maXJtCiAgICBzdWRvIHBhY21hbiAtUyBweXRob24gcHl0aG9uLXBpcCBweXRob24tdmlydHVhbGVudiBsaWJzbmRmaWxlIGdtcCAtLW5vY29uZmlybQplbHNlCiAgICBlY2hvICJUaGlzIHNjcmlwdCByZXF1aXJlcyBhIExpbnV4IGRpc3RyaWJ1dGlvbiB3aXRoIGVpdGhlciBhcHQgb3IgcGFjbWFuLiIKICAgIGV4aXQgMQpmaQoKaWYgWyAhIC1kICIuL21vZHVsZXMvdHJhbnNsYXRpb24vc2VhbWxlc3MiIF07IHRoZW4KICAgIGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tyZXNlYXJjaC9zZWFtbGVzc19jb21tdW5pY2F0aW9uLmdpdCAuL21vZHVsZXMvdHJhbnNsYXRpb24vc2VhbWxlc3MKICAgIApmaQpwaXAgaW5zdGFsbCAuL21vZHVsZXMvdHJhbnNsYXRpb24vc2VhbWxlc3MKcGlwIGluc3RhbGwgZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9odWdnaW5nZmFjZS90cmFuc2Zvcm1lcnMgdG9yY2ggdG9yY2hhdWRpbyB0b3JjaHZpc2lvbiBmYWlyc2VxMgoKbWtkaXIgLXAgLi9tb2R1bGVzL3RyYW5zbGF0aW9uL2luCgpta2RpciAtcCAuL21vZHVsZXMvdHJhbnNsYXRpb24vb3V0Cg==",
    ),
]

for relative_path, encoded_content in file_data:
    full_path = os.path.join(folder_path, relative_path)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    with open(full_path, "wb") as f:
        f.write(base64.b64decode(encoded_content))
    print(f"Created: {full_path}")
command = ["bash", "modules/translation/install_translation.sh"]
subprocess.run(command, check=True)
